#!/usr/bin/python

import os
import sys
import subprocess

from envs import *

envs['script_name'] = __file__.split(os.sep)[-1]
envs['script_name'] = remove_py(envs['script_name'])

MTOA_VERSION_SPLIT = None
if envs['MTOA_VERSION'][0].isdigit():
    MTOA_VERSION_SPLIT = [int(i) for i in envs['MTOA_VERSION'].split('.')[:2]]

DEV = envs['MTOA_VERSION'] == 'dev'
envs['ARNOLD_PLUGIN_PATH'] = getEnv('ARNOLD_PLUGIN_PATH', '')

if MTOA_VERSION_SPLIT and not (MTOA_VERSION_SPLIT[0] >= 3
                               and MTOA_VERSION_SPLIT[1] >= 0):
    envs['ARNOLD_PLUGIN_PATH'] += ":{ALSHADERS_ROOT}/bin"
envs['ARNOLD_PLUGIN_PATH'] += ":{ALSHADERS_LEGACY_ROOT}/bin"
envs['ARNOLD_PLUGIN_PATH'] += ":{YETI_ROOT}/bin/pgYetiArnold.so"
envs['ARNOLD_PLUGIN_PATH'] += ":{JSNOISE_ROOT}/bin"
envs['ARNOLD_PLUGIN_PATH'] += ":{MTOA_ROOT}/shaders"
envs['ARNOLD_PLUGIN_PATH'] += ":{MTOA_ROOT}/procedurals"
envs['ARNOLD_PLUGIN_PATH'] += ":{MTOA_ROOT}/plugins"
envs['ARNOLD_PLUGIN_PATH'] += ":{}".format(os.getcwd())

envs['LD_LIBRARY_PATH'] = getEnv('LD_LIBRARY_PATH', '')
envs['LD_LIBRARY_PATH'] += ":{MAYA_ROOT}/plug-ins/xgen/lib/"
envs['LD_LIBRARY_PATH'] += ":{MAYA_ROOT}/lib/"
envs['LD_LIBRARY_PATH'] += ":{MTOA_ROOT}/bin/"

envs['PYTHONHOME'] = ""


for e, v in envs.items():
    os.environ[e] = v.format(**envs)

s = '*'*30

print_env('ARNOLD_PLUGIN_PATH')
print '{}\n'.format(s)
print_env('LD_LIBRARY_PATH')
print '{}\n'.format(s)

args = sys.argv[1:]

for n, arg in enumerate(args):
    if '.ass' in arg and arg[0] != '/':
        args[n] = os.path.join(os.getcwd(), arg)

kick_exe = "{ARNOLD_ROOT}/bin/{script_name}".format(**envs)
cwd = envs['ARNOLD_ROOT']

if envs['script_name'] == 'kick_mtoa':
    envs['script_name'] = 'kick'
    kick_exe = "{MTOA_ROOT}/bin/{script_name}".format(**envs)
    cwd = envs['MTOA_ROOT']

if not os.path.exists(kick_exe):
    print("{} does not exist! Exiting".format(kick_exe))
    sys.exit(1)

print '\nRUNNING command: "{}"'.format(' '.join([kick_exe] + args))
proc = subprocess.Popen([kick_exe] + args, cwd=os.getcwd())
proc.wait()

exitstatus = proc.returncode
print "Kick exited with status: {}".format(exitstatus)
sys.exit(exitstatus)
